# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in 
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
    
    
    
def index():
    import commands
    form = FORM(
                  TABLE
                  (   TR(A(B(H3('Choose the test cases to be executed:')))),
                      TR('Login',INPUT(_name='testcase1', _type='checkbox', _value="1")),
                      TR('Request VM',INPUT(_name='testcase2', _type='checkbox', _value="2")),
                      TR('My Pending VMs',INPUT(_name='testcase3', _type='checkbox', _value="3")),
                      TR('My VMs',INPUT(_name='testcase21', _type='checkbox', _value="21")),
                      TR('My Pending Tasks',INPUT(_name='testcase4', _type='checkbox', _value="4")),
                      TR('My Completed Tasks',INPUT(_name='testcase5', _type='checkbox', _value="5")),
                      TR('My Failed Taskss',INPUT(_name='testcase6', _type='checkbox', _value="6")),
                      TR('Pending Faculty-Level VM Approvals',INPUT(_name='testcase7', _type='checkbox', _value="7")),
                      TR('Pending Org-Level VM Approvals',INPUT(_name='testcase8', _type='checkbox', _value="8")),
                      TR('Action on pending Org-Level VM Approvals',INPUT(_name='testcase22', _type='checkbox', _value="22")),
                      TR('List All Org-Level VMs',INPUT(_name='testcase9', _type='checkbox', _value="9")),
                      TR('All VMs',INPUT(_name='testcase10', _type='checkbox', _value="10")),
                      TR('Host and VMs',INPUT(_name='testcase11', _type='checkbox', _value="11")),
                      TR('Pending Tasks',INPUT(_name='testcase12', _type='checkbox', _value="12")),
                      TR('Completed Tasks',INPUT(_name='testcase13', _type='checkbox', _value="13")),
                      TR('Failed Tasks',INPUT(_name='testcase14', _type='checkbox', _value="14")),
                      TR('Configure System: Add Host',INPUT(_name='testcase15', _type='checkbox', _value="15")),
                      TR('Configure System: Add Template',INPUT(_name='testcase16', _type='checkbox', _value="16")),
                      TR('Configure System: Add Datastore',INPUT(_name='testcase17', _type='checkbox', _value="17")),
                      TR('Checking Setting',INPUT(_name='testcase18', _type='checkbox', _value="18")),
                      TR('Configure System: Host Setting',INPUT(_name='testcase19', _type='checkbox', _value="19")),
                      TR('Configure System: Host table',INPUT(_name='testcase20', _type='checkbox', _value="20")),
                      
                      BR(),
                      TR(INPUT(_type='submit',_value='submit'))
                  )
              )
              
    if form.process().accepted:
        for i in xrange(1,23):
            test_case_no=request.vars['testcase'+str(i)]
            if test_case_no!=None:
                test_script(test_case_no)
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
